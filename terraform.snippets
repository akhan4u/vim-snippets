snippet aws "AWS Provider for terraform" !b
provider "aws" {
  region  = "${1:us-east-1}"
  profile = "default"
}
endsnippet

snippet azure "Azure Provider for terraform" !b
provider "azurerm" {
  subscription_id = "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
  tenant_id       = "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
  features {}
}
endsnippet

snippet common_tags "Common Tags for terraform resources" !b
locals {
  common_tags = {
	terraform_managed = true
	environment       = "${1:dev}"
	cost_account      = "$1"
  }
}

endsnippet

snippet tags "Resource Tags" !b
tags = local.common_tags
endsnippet

snippet op_for "Looping through Output values with for" !b
[for instance in aws_instance.${1:web} : instance.public_ip]
endsnippet

snippet for "Example for loop" !b
%{ for ip in aws_instance.web.*.private_ip }
server ${ip}
%{ endfor }
endsnippet

snippet tags_name "Resource tags with Name tag" !b
tags = merge(local.common_tags, { Name = "${1}-${local.common_tags.environment}" })
endsnippet

snippet nametag "Name tag for resource" !b
tags = { Name = "${1}" }
endsnippet

snippet terraform
provider "terraform" {
		
}
endsnippet

snippet r_terraform_remote_state
resource "terraform_remote_state" "${1}" {
  backend = "${2}"
}
endsnippet

snippet remote_s3  "Terraform Remote State S3 Backend" !b
# Terraform Standard Backend S3 (with locking via DynamoDB)
terraform {
  backend "s3" {
    bucket = "${1}"
    encrypt = true
    key    = "${2:terraform.tfstate}"
    region = "us-east-1"
    profile = "${3:default}"
    #dynamodb_table = "terraform-state-lock-dynamo"
  }
}

endsnippet

snippet remote_dynamo "Terraform Remote State DynamoDB Table Locking" !b
# Enable S3 Bucket Terraform State file locking via DynamoDB
resource "aws_dynamodb_table" "dynamodb-terraform-state-lock" {
  name = "${1:terraform-state-lock-dynamo}"
  hash_key = "LockID"
  read_capacity = 20
  write_capacity = 20
  attribute {
    name = "LockID"
    type = "S"
  }
}

endsnippet

snippet d_terraform_remote_state
data "terraform_remote_state" "${1}" {
  backend = "${2}"
}
endsnippet

snippet output "Define Terraform Output" !b
output "${1}" {
  value = "${2}"
}
endsnippet

snippet var "Define Terraform Variable" !b
variable "${1}" {
  type = string
  default = "value"
}

endsnippet

snippet var_list "Define Variable of Type List" !b
variable "${1}" {
  description = "${2}"
  type        = list(string)
  default     = ["string1", "string2", "string3"]
}

# Loop Over a List of string with for_each
# for_each = toset(var.$1)		# toset() converts a list to a set
# name     = each.value

# Loop Over a List of string with count
# count = length(var.$1)
# name  = var.$1[count.index]

endsnippet

snippet var_map "Define Variable of Type Map" !b
variable "${1}" {
  type = map
  default = {
    key1 = "value1"
    key2 = "value2"
    key3 = "value3"
  }
}

# Getting Key value from variable of Map type with lookup() function : lookup(var.$1, var.key, error)
# Example Lookup of AMI, with Region as Key and AMI Id as value      : ami = "lookup(var.$1, var.region, error)"

endsnippet

snippet lifecycle "Define Resource Lifecycle Policies" !b
lifecycle {
  #create_before_destroy = true
  #prevent_destroy = true
  #ignore_changes = [tags]
}
endsnippet

snippet prov_remote "Add a Remote Provisoner in AWS EC2 Instance" !b
provisioner "file" {
  source      = "script.sh"
  destination = "/tmp/script.sh"
}

connection {
  type     = "ssh"
  port     = 22
  user     = "ubuntu"
  private_key = file("key.pem")
  host     = self.public_ip
  }

provisioner "remote-exec" {
  inline = [
    "chmod +x /tmp/script.sh",
    "/tmp/script.sh args",
   ]
}
endsnippet

snippet prov_local "Add a Local Provisoner in AWS EC2 Instance" !b
provisioner "local-exec" {
  command = "echo ${aws_instance.web.private_ip} >> private_ips.txt"
}
endsnippet

snippet ingress "Define an Ingress rule for a security group" !b
ingress {
  description = "Ingress for ${2} ($1)"
  from_port   = ${1}
  to_port     = $1
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
}
endsnippet

snippet egress "Define an Egress rule for a security group" !b
egress {
  from_port   = 0
  to_port     = 0
  protocol    = "-1"
  cidr_blocks = ["0.0.0.0/0"]
}
endsnippet

snippet r_aws_s3_bucket_website "Terraform S3 Bucket hosted Website Configuration" !b
resource "aws_s3_bucket" "${1}" {
  bucket = var.website_bucket_name
  acl    = "public-read"
  policy = <<EOF
  {
    "Version": "2008-10-17",
    "Statement": [
      {
        "Sid": "PublicReadForGetBucketObjects",
        "Effect": "Allow",
        "Principal": {
          "AWS": "*"
        },
        "Action": "s3:GetObject",
        "Resource": "arn:aws:s3:::${var.website_bucket_name}/*"
      }
    ]
  }
  EOF

  # cors_rule {
  #   allowed_headers = ["*"]
  #   allowed_methods = ["PUT", "POST"]
  #   allowed_origins = ["*"]
  #   expose_headers  = ["ETag"]
  #   max_age_seconds = 3000
  # }

  website {
    index_document = "index.html"
    error_document = "error.html"
  }

  tags = local.common_tags
}
endsnippet

snippet ubuntu_16 "Data block to get the latest Ubuntu 16.04 AMI Id" !b
data "aws_ami" "ubuntu" {
  most_recent = true
  owners      = ["099720109477"]

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  filter {
    name   = "image-type"
    values = ["machine"]
  }

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"]
  }
}
endsnippet

snippet ubuntu_18 "Data block to get the latest Ubuntu 18.04 AMI Id" !b
data "aws_ami" "ubuntu" {
  most_recent = true
  owners      = ["099720109477"]

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  filter {
    name   = "image-type"
    values = ["machine"]
  }

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"]
  }
}
endsnippet

snippet filter "Place a filter in data block resource" !b
filter {
  name   = "${1:Name}"
  values = ["${2:value}"]
}
endsnippet

snippet ssh-key "Generate ssh private keypair in pem format" !b
resource "tls_private_key" "ssh" {
  algorithm = "RSA"
  rsa_bits  = 4096
}
endsnippet

